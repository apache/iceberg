/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

test {
    useJUnitPlatform()
}
dependencies {
    implementation project(path: ':iceberg-bundled-guava', configuration: 'shadow')
    api project(':iceberg-api')
    implementation project(':iceberg-common')
    implementation project(':iceberg-core')
    annotationProcessor "org.immutables:value"
    compileOnly "org.immutables:value"
    implementation "com.github.ben-manes.caffeine:caffeine"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.core:jackson-core"

    compileOnly 'software.amazon.awssdk:url-connection-client'
    compileOnly 'software.amazon.awssdk:apache-client'
    compileOnly 'software.amazon.awssdk:auth'
    compileOnly 'software.amazon.awssdk:s3'
    compileOnly 'software.amazon.awssdk:kms'
    compileOnly 'software.amazon.awssdk:glue'
    compileOnly 'software.amazon.awssdk:sts'
    compileOnly 'software.amazon.awssdk:dynamodb'
    compileOnly 'software.amazon.awssdk:lakeformation'

    compileOnly("org.apache.hadoop:hadoop-common") {
        exclude group: 'org.apache.avro', module: 'avro'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    compileOnly 'org.apache.httpcomponents.client5:httpclient5'

    testImplementation 'software.amazon.awssdk:iam'
    testImplementation 'software.amazon.awssdk:s3control'
    testImplementation project(path: ':iceberg-api', configuration: 'testArtifacts')
    testImplementation("com.adobe.testing:s3mock-junit5") {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
        exclude group: 'junit'
    }
    testImplementation "com.esotericsoftware:kryo"
    testImplementation "org.xerial:sqlite-jdbc"
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.apache.httpcomponents.client5:httpclient5"
    testImplementation 'org.mock-server:mockserver-netty'
    testImplementation 'org.mock-server:mockserver-client-java'
    testImplementation 'javax.xml.bind:jaxb-api'
    testImplementation project(path: ':iceberg-core', configuration: 'testArtifacts')
}

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    jvmArgs += project.property('extraJvmArgs')
}
