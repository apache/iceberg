/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

rootProject.name = 'iceberg'
include 'bom'
include 'api'
include 'common'
include 'core'
include 'data'
include 'aliyun'
include 'aws'
include 'aws-bundle'
include 'azure'
include 'azure-bundle'
include 'orc'
include 'arrow'
include 'parquet'
include 'bundled-guava'
include 'spark'
include 'pig'
include 'hive-metastore'
include 'nessie'
include 'gcp'
include 'gcp-bundle'
include 'dell'
include 'snowflake'
include 'delta-lake'
include 'kafka-connect'
include 'open-api'

project(':bom').name = 'iceberg-bom'
project(':api').name = 'iceberg-api'
project(':common').name = 'iceberg-common'
project(':core').name = 'iceberg-core'
project(':data').name = 'iceberg-data'
project(':aliyun').name = 'iceberg-aliyun'
project(':aws').name = 'iceberg-aws'
project(':aws-bundle').name = 'iceberg-aws-bundle'
project(':azure').name = 'iceberg-azure'
project(':azure-bundle').name = 'iceberg-azure-bundle'
project(':orc').name = 'iceberg-orc'
project(':arrow').name = 'iceberg-arrow'
project(':parquet').name = 'iceberg-parquet'
project(':bundled-guava').name = 'iceberg-bundled-guava'
project(':spark').name = 'iceberg-spark'
project(':pig').name = 'iceberg-pig'
project(':hive-metastore').name = 'iceberg-hive-metastore'
project(':nessie').name = 'iceberg-nessie'
project(':gcp').name = 'iceberg-gcp'
project(':gcp-bundle').name = 'iceberg-gcp-bundle'
project(':dell').name = 'iceberg-dell'
project(':snowflake').name = 'iceberg-snowflake'
project(':delta-lake').name = 'iceberg-delta-lake'
project(':kafka-connect').name = 'iceberg-kafka-connect'
project(':open-api').name = 'iceberg-open-api'

if (System.getProperty("scalaVersion") != null) {
  if (System.getProperty("scalaVersions") != null && !System.getProperty("scalaVersions").equals(System.getProperty("scalaVersion"))) {
    throw new GradleException("Using the old 'scalaVersion' system property _and_ the new 'scalaVersions' with different values. Migrate to the 'scalaVersions' system property")
  }
  System.setProperty("scalaVersions", System.getProperty("scalaVersion"))
  logger.warn("Using the old 'scalaVersion' system property, migrate to the 'scalaVersions' system property")
}
if (System.getProperty("defaultScalaVersion") != null) {
  if (System.getProperty("defaultScalaVersions") != null && !System.getProperty("defaultScalaVersions").equals(System.getProperty("defaultScalaVersion"))) {
    throw new GradleException("Using the old 'defaultScalaVersion' system property _and_ the new 'defaultScalaVersions' with different values. Migrate to the 'defaultScalaVersions' system property")
  }
  System.setProperty("defaultScalaVersions", System.getProperty("defaultScalaVersion"))
  logger.warn("Using the old 'defaultScalaVersion' system property, migrate to the 'defaultScalaVersions' system property")
}

boolean ideSyncActive =
        Boolean.getBoolean("idea.sync.active") || System.getProperty("eclipse.product") != null || gradle.startParameter.taskNames.any { it.startsWith("eclipse") }

if (null != System.getProperty("allModules")) {
  if (!["true", "false"].contains(System.getProperty("allModules"))) {
    throw new GradleException("The 'allModules' system property is present, but does not represent a boolean, change to '-DallModules=true'")
  }
  if (Boolean.getBoolean("allModules")) {
    System.setProperty("flinkVersions", System.getProperty("knownFlinkVersions"))
    System.setProperty("sparkVersions", System.getProperty("knownSparkVersions"))
    System.setProperty("hiveVersions", System.getProperty("knownHiveVersions"))
  }
}
if (Boolean.getBoolean("allFlinkVersions")) {
  System.setProperty("flinkVersions", System.getProperty("knownFlinkVersions"))
}
if (Boolean.getBoolean("allSparkVersions")) {
  System.setProperty("sparkVersions", System.getProperty("knownSparkVersions"))
}
if (Boolean.getBoolean("allHiveVersions")) {
  System.setProperty("hiveVersions", System.getProperty("knownHiveVersions"))
}

List<String> knownFlinkVersions = System.getProperty("knownFlinkVersions").split(",")
List<String> flinkVersions = (System.getProperty("flinkVersions") != null ? System.getProperty("flinkVersions") : System.getProperty("defaultFlinkVersions", "")).split(",").findAll { !it.empty }
System.setProperty("flinkVersions", flinkVersions.join(","))
if (!knownFlinkVersions.containsAll(flinkVersions)) {
  throw new GradleException("Found unsupported Flink versions: " + (flinkVersions - knownFlinkVersions))
}

List<String> knownHiveVersions = System.getProperty("knownHiveVersions").split(",")
List<String> hiveVersions = (System.getProperty("hiveVersions") != null ? System.getProperty("hiveVersions") : System.getProperty("defaultHiveVersions", "")).split(",").findAll { !it.empty }
System.setProperty("hiveVersions", hiveVersions.join(","))
if (!knownHiveVersions.containsAll(hiveVersions)) {
  throw new GradleException("Found unsupported Hive versions: " + (hiveVersions - knownHiveVersions))
}
List<String> knownSparkVersions = System.getProperty("knownSparkVersions").split(",")
List<String> sparkVersions = (System.getProperty("sparkVersions") != null ? System.getProperty("sparkVersions") : System.getProperty("defaultSparkVersions", "")).split(",").findAll { !it.empty }
System.setProperty("sparkVersions", sparkVersions.join(","))
if (!knownSparkVersions.containsAll(sparkVersions)) {
  throw new GradleException("Found unsupported Spark versions: " + (sparkVersions - knownSparkVersions))
}

List<String> knownScalaVersions = System.getProperty("knownScalaVersions").split(",").toList().findAll { !it.empty}
List<String> scalaVersions = (System.getProperty("scalaVersions") != null ? System.getProperty("scalaVersions") : System.getProperty("defaultScalaVersions", "")).split(",").findAll { !it.empty }
System.setProperty("scalaVersions", scalaVersions.join(","))
boolean allScalaVersions = Boolean.getBoolean("allScalaVersions")
if (!ideSyncActive && allScalaVersions) {
  System.setProperty("scalaVersions", System.getProperty("knownScalaVersions"))
  scalaVersions = knownScalaVersions
}

Map<String, List<String>> sparkScalaVersions = knownSparkVersions.collectEntries {
  List<String> scalaVers = [] + scalaVersions
  scalaVers.retainAll(System.getProperty("sparkScalaVersions_${it}").split(",").toList())
  if (!knownScalaVersions.containsAll(scalaVers) || scalaVers.empty) {
    throw new GradleException("Found unsupported Scala versions: " + (scalaVers - knownScalaVersions))
  }
  if (!allScalaVersions || ideSyncActive) {

    scalaVers = [scalaVers[0]]
  }
  System.setProperty("sparkScalaVersions_${it}", scalaVers.join(","))
  [it, scalaVers]
}

if (!flinkVersions.isEmpty()) {
  include 'flink'
  project(':flink').name = 'iceberg-flink'
}

def flinkProject(String pattern, String ver) {
  include ":iceberg-flink:iceberg-${pattern}-${ver}"
  ProjectDescriptor prj = project(":iceberg-flink:iceberg-${pattern}-${ver}")
  prj.projectDir = file("flink/v${ver}/${pattern}")
  prj.name = "iceberg-${pattern}-${ver}".toString()
}

for (ver in flinkVersions) {
  flinkProject("flink", ver)
  flinkProject("flink-runtime", ver)
}

def sparkProject(String pattern, String ver, String scala) {
  include ":iceberg-spark:iceberg-${pattern}-${ver}_${scala}"
  ProjectDescriptor prj = project(":iceberg-spark:iceberg-${pattern}-${ver}_${scala}")
  prj.projectDir = file("spark/v${ver}/${pattern}")
  prj.name = "iceberg-${pattern}-${ver}_${scala}".toString()
}

for (ver in sparkVersions) {
  for (scala in sparkScalaVersions[ver]) {
    sparkProject("spark", ver, scala)
    sparkProject("spark-extensions", ver, scala)
    sparkProject("spark-runtime", ver, scala)
  }
}

// hive 3 depends on hive 2, so always add hive 2 if hive3 is enabled
if (hiveVersions.contains("2") || hiveVersions.contains("3")) {
  include 'mr'
  include 'hive-runtime'

  project(':mr').name = 'iceberg-mr'
  project(':hive-runtime').name = 'iceberg-hive-runtime'
}

if (hiveVersions.contains("3")) {
  include 'hive3'
  include 'hive3-orc-bundle'
  project(':hive3').name = 'iceberg-hive3'
  project(':hive3-orc-bundle').name = 'iceberg-hive3-orc-bundle'
}

include ":iceberg-kafka-connect:kafka-connect-events"
project(":iceberg-kafka-connect:kafka-connect-events").projectDir = file('kafka-connect/kafka-connect-events')
project(":iceberg-kafka-connect:kafka-connect-events").name = "iceberg-kafka-connect-events"

include ":iceberg-kafka-connect:kafka-connect"
project(":iceberg-kafka-connect:kafka-connect").projectDir = file('kafka-connect/kafka-connect')
project(":iceberg-kafka-connect:kafka-connect").name = "iceberg-kafka-connect"

include ":iceberg-kafka-connect:kafka-connect-runtime"
project(":iceberg-kafka-connect:kafka-connect-runtime").projectDir = file('kafka-connect/kafka-connect-runtime')
project(":iceberg-kafka-connect:kafka-connect-runtime").name = "iceberg-kafka-connect-runtime"
