# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
[tool.poetry]
name = "pyiceberg"
version = "0.3.0"
readme = "README.md"
homepage = "https://iceberg.apache.org/"
repository = "https://github.com/apache/iceberg/"
description = "Apache Iceberg is an open table format for huge analytic datasets"
authors = ["Apache Software Foundation <dev@iceberg.apache.org>"]
license = "Apache License 2.0"
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11"
]
packages = [
  { include = "pyiceberg" },
  { from = "vendor", include = "fb303" },
  { from = "vendor", include = "hive_metastore" },
  { include = "tests", format = "sdist" },
  { include = "Makefile", format = "sdist" },
  { include = "NOTICE", format = ["sdist", "wheel"] }
]
include = [{ path = "dev", format = "sdist" }]

[tool.poetry.dependencies]
python = "^3.8"
mmhash3 = "^3" # JUST: Unless 3.0.0's lack of Python 3.10/3.11 builds means it's a broken release, in which case ">=3.0.1, <4.0.0" may make sense, but it seems tests pass with 3.0.0.
requests = "^2.20" # JUST: Tests pass with 2.22 (lower versions aren't compatible with some other strictly-pinned dependencies); picked nearby 2.20 as the most recent version without security risks.
click = ">=7.1.1,<9.0.0" # JUST: If want to be more conservative with `click`, can do "^8", but this still works because there are no CLI tests in `pytest`. `click` is also less likely to be severely outdated, as it's not used as part of library cores. FYI lower bound taken from https://github.com/tiangolo/typer/commit/b97298181bd2a932be70ba417b9a712294fa327c.
rich = ">=10.11.0,<14.0.0" # JUST: Lower bound taken from https://github.com/tiangolo/typer/commit/252ed30936fdd47ad6fad05f605fe0a004abb51c (tests pass).
pyyaml = "^5.4" # JUST: 5.4 includes a fix for CVE-2020-14343, so let's keep this lower bound.
pydantic = "^1.9" # JUST: 1.8.2 and below are not compatible with `pyiceberg` (tests fail).
fsspec = ">=2021.09.0,<2024.1.0" # JUST: Lower bound for `lexists` support; see https://github.com/fsspec/filesystem_spec/commit/315c3431b3f917dd64c9454f5c38d8ea36b6db48.
pyparsing = "^3.0.7" # JUST: `min` keyword added in https://github.com/pyparsing/pyparsing/commit/18ea2e761a7d1a097d9b42064678d1d10aba803c.
zstandard = ">=0.13.0,<1.0.0" # JUST: 0.13 added support for Python 3.8. For some reason, "^0.13" or "^0.13.0" keeps going for 0.13 instead of 0.21 with `poetry lock`, hence the explicit declaration.
pyarrow = { version = ">=8.0.0,<=11.0.0", optional = true }
pandas = { version = ">=1.4.4,<=1.5.3", optional = true }
duckdb = "^0.5" # JUST: The DuckDB functionality is very limited, but starting off conservative.
ray = { version = "^2", optional = true } # JUST: Relaxed upper bound (lower bound untouched).
python-snappy = { version = "^0.6", optional = true } # JUST: I can't find release notes for this library, so being very conservative.
thrift = { version = ">=0.13.0,<1.0.0", optional = true } # JUST: First version without a current known vulnerability. Also, it passes tests. Similar to `zstandard`, "^0.13" seems to install the lower bound.
boto3 = { version = ">=1.17.106", optional = true } # JUST: Lower bound set due to https://github.com/aio-libs/aiobotocore/blob/1.4.0/setup.py#L23 (earliest `aiobotocore` from `s3fs` bounds).
# The versions of the fsspec implementations should run in sync with fsspec above  # TODO: Remove? Definitely doesn't seem to hold true to `adlfs`, and `s3fs` enforces it itself.
s3fs = ">=2021.08.0,<2024.1.0" # JUST: Lower bound set due to https://github.com/fsspec/s3fs/commit/ce6951b1e5f878ba69ff3f55c500c4309f8f4672; upper bound set arbitrarily.
adlfs = { version = ">=2021.07.0,<2024.1.0", optional = true } # JUST: First CalVered version of `adlfs`.

[tool.poetry.dev-dependencies]
pytest = "7.3.1"
pytest-checkdocs = "2.9.0"
pre-commit = "3.2.2"
fastavro = "1.7.3"
coverage = { version = "^7.2.3", extras = ["toml"] }
requests-mock = "1.10.0"
moto = "^4.1.7"
typing-extensions = '4.5.0'

[tool.poetry.scripts]
pyiceberg = "pyiceberg.cli.console:run"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
pyarrow = ["pyarrow"]
pandas = ["pandas", "pyarrow"]
duckdb = ["duckdb", "pyarrow"]
ray = ["ray", "pyarrow", "pandas"]
snappy = ["python-snappy"]
hive = ["thrift"]
s3fs = ["s3fs"]
glue = ["boto3"]
adlfs = ["adlfs"]
dynamodb = ["boto3"]
zstandard = ["zstandard"]

[tool.pytest.ini_options]
markers = [
  "s3: marks a test as requiring access to s3 compliant storage (use with --aws-access-key-id, --aws-secret-access-key, and --endpoint-url args)",
  "adlfs: marks a test as requiring access to adlfs compliant storage (use with --adlfs.account-name, --adlfs.account-key, and --adlfs.endpoint args)",
  "integration: marks integration tests against Apache Spark"
]

[tool.black]
line-length = 130
target-version = ['py38']

[tool.isort]
src_paths = ["pyiceberg/", "tests/"]
multi_line_output = 3
profile = 'black'
line_length = 130
force_grid_wrap = 4

[tool.pycln]
all = true

[tool.mypy]
no_implicit_optional = true
namespace_packages = false
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "pyarrow.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pandas.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "snappy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "zstandard.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fastavro.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mmh3.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "hive_metastore.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "thrift.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "requests_mock.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "click.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rich.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fsspec.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "s3fs.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "azure.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "adlfs.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "packaging.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "boto3"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "botocore.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "moto"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiobotocore.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "duckdb.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "ray.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyparsing.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyspark.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ['pyiceberg/']
