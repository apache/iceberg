/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.iceberg.mr.hive;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.apache.hadoop.hive.metastore.api.FieldSchema;
import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.MapObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.StructField;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
import org.apache.iceberg.Schema;
import org.apache.iceberg.mr.hive.serde.objectinspector.IcebergObjectInspector;
import org.apache.iceberg.mr.hive.serde.objectinspector.IcebergRecordObjectInspector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HiveSchemaUtil {
  private static final Logger LOG = LoggerFactory.getLogger(HiveSchemaUtil.class);

  private HiveSchemaUtil() {
  }

  /**
   * Converts the list of Hive FieldSchemas to an Iceberg schema.
   * <p>
   * The list should contain the columns and the partition columns as well.
   * @param fieldSchemas The list of the columns
   * @return An equivalent Iceberg Schema
   */
  public static Schema schema(List<FieldSchema> fieldSchemas) {
    List<String> names = new ArrayList<>(fieldSchemas.size());
    List<TypeInfo> typeInfos = new ArrayList<>(fieldSchemas.size());

    for (FieldSchema col : fieldSchemas) {
      names.add(col.getName());
      typeInfos.add(TypeInfoUtils.getTypeInfoFromTypeString(col.getType()));
    }

    return convert(names, typeInfos);
  }

  /**
   * Converts the Hive properties defining the columns to an Iceberg schema.
   * @param columnNames The property containing the column names
   * @param columnTypes The property containing the column types
   * @param columnNameDelimiter The name delimiter
   * @return The Iceberg schema
   */
  public static Schema schema(String columnNames, String columnTypes, String columnNameDelimiter) {
    // Parse the configuration parameters
    List<String> names = new ArrayList<>();
    Collections.addAll(names, columnNames.split(columnNameDelimiter));

    return HiveSchemaUtil.convert(names, TypeInfoUtils.getTypeInfosFromTypeString(columnTypes));
  }

  /**
   * Checks if the ObjectInspectors generated by the two schema definitions are compatible.
   * <p>
   * Currently only allows the same column names and column types. Later we might want allow compatible column types as
   * well.
   * TODO: We might want to allow compatible conversions
   * @param schema First schema
   * @param other Second schema
   * @return True if the two schema is compatible
   */
  public static boolean compatible(Schema schema, Schema other) {
    ObjectInspector inspector = IcebergObjectInspector.create(schema);
    ObjectInspector otherInspector = IcebergObjectInspector.create(other);

    if (!(inspector instanceof IcebergRecordObjectInspector) ||
        !(otherInspector instanceof IcebergRecordObjectInspector)) {
      return false;
    }

    return compatible(inspector, otherInspector);
  }

  private static boolean compatible(ObjectInspector inspector, ObjectInspector other) {
    if (inspector == null && other == null) {
      // We do not expect this type of calls, but for completeness shake
      return true;
    }

    if (inspector == null || other == null || !inspector.getCategory().equals(other.getCategory())) {
      return false;
    }

    switch (inspector.getCategory()) {
      case PRIMITIVE:
        if (inspector instanceof TimestampObjectInspector && other instanceof TimestampObjectInspector) {
          return true;
        }
        return inspector.equals(other);

      case MAP:
        MapObjectInspector mapInspector = (MapObjectInspector) inspector;
        MapObjectInspector otherMapInspector = (MapObjectInspector) other;

        return compatible(mapInspector.getMapKeyObjectInspector(), otherMapInspector.getMapKeyObjectInspector()) &&
            compatible(mapInspector.getMapValueObjectInspector(), otherMapInspector.getMapValueObjectInspector());

      case LIST:
        return compatible(((ListObjectInspector) inspector).getListElementObjectInspector(),
            ((ListObjectInspector) other).getListElementObjectInspector());

      case STRUCT:
        return compatible((StructObjectInspector) inspector, (StructObjectInspector) other);

      case UNION:
      default:
        throw new IllegalArgumentException("Unsupported inspector type " + inspector + ", " + other);
    }
  }

  private static boolean compatible(StructObjectInspector inspector, StructObjectInspector other) {
    List<? extends StructField> structFields = inspector.getAllStructFieldRefs();

    if (structFields.size() != other.getAllStructFieldRefs().size()) {
      return false;
    }

    for (StructField field : structFields) {
      StructField otherField;
      try {
        otherField = other.getStructFieldRef(field.getFieldName());
      } catch (Exception e) {
        LOG.debug("Error getting struct field", e);
        return false;
      }

      if (!compatible(field.getFieldObjectInspector(), otherField.getFieldObjectInspector())) {
        return false;
      }
    }

    return true;
  }

  private static Schema convert(List<String> names, List<TypeInfo> typeInfos) {
    HiveSchemaConverter converter = new HiveSchemaConverter();
    return new Schema(converter.convert(names, typeInfos));
  }
}
