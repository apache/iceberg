/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

project(':iceberg-hive3') {

  // run the tests in iceberg-mr with Hive3 dependencies
  sourceSets {
    test {
      java.srcDirs = ['../mr/src/test/java', 'src/test/java']
      resources.srcDirs = ['../mr/src/test/resources', 'src/test/resources']
    }
  }

  // exclude these Hive2-specific tests from iceberg-mr
  test {
    exclude '**/TestIcebergDateObjectInspector.class'
    exclude '**/TestIcebergTimestampObjectInspector.class'
    exclude '**/TestIcebergTimestampWithZoneObjectInspector.class'
  }

  dependencies {
    compileOnly project(path: ':iceberg-bundled-guava', configuration: 'shadow')
    compileOnly project(':iceberg-api')
    compileOnly project(':iceberg-core')
    compileOnly project(':iceberg-common')
    compileOnly project(':iceberg-hive-metastore')
    compileOnly project(':iceberg-parquet')
    compileOnly project(':iceberg-hive3-orc-bundle')
    compileOnly project(':iceberg-mr')
    compileOnly project(':iceberg-data')
    compileOnly project(':iceberg-orc')

    compileOnly(libs.hadoop3.client) {
      exclude group: 'org.apache.avro', module: 'avro'
    }

    compileOnly(libs.hive3.exec) {
      artifact {
        classifier = 'core'
      }
      exclude group: 'com.google.code.findbugs', module: 'jsr305'
      exclude group: 'com.google.guava'
      exclude group: 'com.google.protobuf', module: 'protobuf-java'
      exclude group: 'org.apache.avro', module: 'avro'
      exclude group: 'org.apache.calcite.avatica'
      exclude group: 'org.apache.hive', module: 'hive-llap-tez'
      exclude group: 'org.apache.logging.log4j'
      exclude group: 'org.pentaho' // missing dependency
      exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    compileOnly(libs.orc.core) {
      artifact {
        classifier = 'nohive'
      }
      exclude group: 'org.apache.hadoop'
      exclude group: 'commons-lang'
      // These artifacts are shaded and included in the orc-core fat jar
      exclude group: 'com.google.protobuf', module: 'protobuf-java'
      exclude group: 'org.apache.hive', module: 'hive-storage-api'
    }

    compileOnly(libs.hive3.metastore) {
      exclude group: 'org.apache.orc'
      exclude group: 'org.apache.parquet'
    }
    compileOnly(libs.hive3.serde) {
      exclude group: 'org.apache.orc'
      exclude group: 'org.apache.parquet'
    }

    compileOnly(libs.parquet.avro) {
      exclude group: 'org.apache.avro', module: 'avro'
      // already shaded by Parquet
      exclude group: 'it.unimi.dsi'
      exclude group: 'org.codehaus.jackson'
    }

    testImplementation project(path: ':iceberg-api', configuration: 'testArtifacts')
    testImplementation project(path: ':iceberg-core', configuration: 'testArtifacts')
    testImplementation project(path: ':iceberg-hive-metastore', configuration: 'testArtifacts')
    testImplementation project(path: ':iceberg-data', configuration: 'testArtifacts')

    testImplementation libs.avro.avro
    testImplementation libs.calcite.core
    testImplementation libs.kryo.shaded
    testImplementation libs.jackson.annotations
    testImplementation(libs.hive3.service) {
      exclude group: 'org.apache.hive', module: 'hive-exec'
      exclude group: 'org.apache.orc'
    }
    testImplementation libs.tez010.dag
    testImplementation libs.tez010.mapreduce
  }

  test {
    // testJoinTables / testScanTable
    maxHeapSize '2500m'
  }
}
