#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: "Java CI Benchmark"
on:
  pull_request:
    types: [ labeled, opened, synchronize, reopened ]
    paths-ignore:
    - '.github/workflows/python-ci.yml'
    - 'python/**'
    - 'python_legacy/**'
    - 'site/**'

jobs:
  run-benchmark:
    # if: contains(github.event.pull_request.labels.*.name, 'benchmark-')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jvm: [11]
    env:
      SPARK_LOCAL_IP: localhost
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - run: echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts

    - name: Get Benchmark to run
      id: get_benchmark
      run: |
        # this first branch is only for testing
        if [[ "${{ contains(github.event.pull_request.labels.*.name, 'NESSIE') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::VectorizedReadFlatParquetDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedListParquetDataWriteBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedListParquetDataWriteBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-SparkParquetReadersNestedDataBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IparkParquetReadersNestedDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-SparkParquetWritersFlatDataBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IparkParquetWritersFlatDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceFlatORCDataReadBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceFlatORCDataReadBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-SparkParquetReadersFlatDataBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IparkParquetReadersFlatDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-VectorizedReadDictionaryEncodedFlatParquetDataBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::VectorizedReadDictionaryEncodedFlatParquetDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedListORCDataWriteBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedListORCDataWriteBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-VectorizedReadFlatParquetDataBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::VectorizedReadFlatParquetDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceFlatParquetDataWriteBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceFlatParquetDataWriteBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedAvroDataReadBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedAvroDataReadBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceFlatAvroDataReadBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceFlatAvroDataReadBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedParquetDataWriteBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedParquetDataWriteBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedORCDataReadBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedORCDataReadBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceFlatParquetDataReadBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceFlatParquetDataReadBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceFlatParquetDataFilterBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceFlatParquetDataFilterBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedParquetDataFilterBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedParquetDataFilterBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-SparkParquetWritersNestedDataBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IparkParquetWritersNestedDataBenchmark
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'benchmark-IcebergSourceNestedParquetDataReadBenchmark') }}" == "true" ]] ; then
          echo ::set-output name=BENCHMARK::IcebergSourceNestedParquetDataReadBenchmark
        else
          echo "Cannot find benchmark to run
          exit 1
        fi

    - run: ./gradlew :iceberg-spark3:jmh -PjmhIncludeRegex=${{ steps.get_benchmark.outputs.BENCHMARK }} -PjmhOutputPath=benchmark/benchmark-result.txt
    - uses: actions/upload-artifact@v2
      with:
        name: benchmark results
        path: |
          **/benchmark/benchmark-result.txt