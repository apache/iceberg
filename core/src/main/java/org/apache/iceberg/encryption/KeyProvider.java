/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.iceberg.encryption;

import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.Map;

/**
 * a minimum key provider interface to connect to a key management system (KMS).
 */
public interface KeyProvider extends Serializable {

  /**
   * Generate a new key using a key which is stored in KMS and referenced by an ID.
   * <p>
   * A provider can implement this by generating a cryptographically secure random string
   * and then encrypt the random string using the key of given ID in KMS.
   * Some providers also support this sequence of operations directly on the server side.
   *
   * @param keyId a key ID that represents a key stored in KMS
   * @param context additional authenticated data that can be used to ensure integrity
   * @return a pair of plaintext and encrypted key generated by the given key ID
   */
  KeyGenerationResult generateKey(String keyId, Map<String, String> context);

  /**
   * Decrypt data.
   * <p>
   * The data is usually a short encrypted key,
   * so that and after decryption, the key is used to decrypt actual data files.
   *
   * @param encryptedData encrypted key bytes
   * @param context additional authenticated data that can be used to ensure integrity
   * @return plaintext key bytes
   */
  ByteBuffer decrypt(ByteBuffer encryptedData, Map<String, String> context);

  /**
   * Returns the algorithm used by the provider when generating keys, such as AES_256_GCM
   */
  KeyGenerationAlgorithm keyGenerationAlgorithm();

  /**
   * Returns the spec of the key, such as AES_128
   */
  KeySpec keySpec();

  /**
   * Initialize key provider from catalog properties
   * @param properties catalog properties
   */
  void initialize(Map<String, String> properties);

  enum KeyGenerationAlgorithm {
    AES_256_GCM
  }

  enum KeySpec {
    AES_128,
    AES_256
  }

  class KeyGenerationResult {
    private final ByteBuffer key;
    private final ByteBuffer encryptedKey;

    public KeyGenerationResult(ByteBuffer key, ByteBuffer encryptedDek) {
      this.key = key;
      this.encryptedKey = encryptedDek;
    }

    public ByteBuffer key() {
      return key;
    }

    public ByteBuffer encryptedKey() {
      return encryptedKey;
    }
  }
}
