/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.iceberg.actions;

import java.util.Map;
import java.util.stream.Stream;
import org.apache.iceberg.ContentFile;
import org.apache.iceberg.ContentScanTask;
import org.apache.iceberg.StructLike;

/**
 * Result of the file rewrite planning as generated by the {@link FileRewritePlanner#plan()}.
 *
 * <p>The plan contains the stream of the planned groups and statistics about the number of the
 * generated groups, like the total number of the groups and the groups per partition. The plan also
 * contains some calculated values required by the {@link FileRewriteExecutor}s where the values are
 * based on the input data and the planning parameters.
 *
 * <p>Groups in a plan could be processed independently. For example, in Spark this means that each
 * group would be rewritten in its own Spark job.
 *
 * @param <I> the Java type of the plan info
 * @param <T> the Java type of the tasks to read content files
 * @param <F> the Java type of the content files
 * @param <G> the Java type of the planned groups
 */
public abstract class FileRewritePlan<
    I,
    T extends ContentScanTask<F>,
    F extends ContentFile<F>,
    G extends FileRewriteGroup<I, T, F>> {
  private final Stream<G> groups;
  private final int totalGroupCount;
  private final Map<StructLike, Integer> groupsInPartition;
  private final long writeMaxFileSize;

  protected FileRewritePlan(
      Stream<G> groups,
      int totalGroupCount,
      Map<StructLike, Integer> groupsInPartition,
      long writeMaxFileSize) {
    this.groups = groups;
    this.totalGroupCount = totalGroupCount;
    this.groupsInPartition = groupsInPartition;
    this.writeMaxFileSize = writeMaxFileSize;
  }

  /** The stream of the generated {@link FileRewriteGroup}s. */
  public Stream<G> groups() {
    return groups;
  }

  /** The number of the generated groups in the given partition. */
  public int groupsInPartition(StructLike partition) {
    return groupsInPartition.get(partition);
  }

  /** The total number of the groups generated by this plan. */
  public int totalGroupCount() {
    return totalGroupCount;
  }

  /** Calculated maximum file size based on the planner target file size configuration */
  public long writeMaxFileSize() {
    return writeMaxFileSize;
  }
}
