/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.iceberg.actions;

import java.util.Map;
import java.util.stream.Stream;
import org.apache.iceberg.ContentFile;
import org.apache.iceberg.ContentScanTask;
import org.apache.iceberg.StructLike;

/**
 * Result of the file rewrite planning.
 *
 * <p>Contains the planned groups, calculated values required by the {@link FileRewriteExecutor}s
 * and statistics.
 *
 * @param <I> the Java type of the plan info
 * @param <T> the Java type of the tasks to read content files
 * @param <F> the Java type of the content files
 * @param <G> the Java type of the planned groups
 */
public class FileRewritePlan<
    I,
    T extends ContentScanTask<F>,
    F extends ContentFile<F>,
    G extends FileRewriteGroup<I, T, F>> {
  private final Stream<G> groups;
  private final int totalGroupCount;
  private final Map<StructLike, Integer> groupsInPartition;
  private final long writeMaxFileSize;
  private final int outputSpecId;

  protected FileRewritePlan(
      Stream<G> groups,
      int totalGroupCount,
      Map<StructLike, Integer> groupsInPartition,
      long writeMaxFileSize,
      int outputSpecId) {
    this.groups = groups;
    this.totalGroupCount = totalGroupCount;
    this.groupsInPartition = groupsInPartition;
    this.writeMaxFileSize = writeMaxFileSize;
    this.outputSpecId = outputSpecId;
  }

  /** The stream of the generated {@link RewriteFileGroup}s. */
  public Stream<G> groups() {
    return groups;
  }

  /** The number of the generated groups in the given partition. */
  public int groupsInPartition(StructLike partition) {
    return groupsInPartition.get(partition);
  }

  /** The total number of the groups generated by this plan. */
  public int totalGroupCount() {
    return totalGroupCount;
  }

  /** Calculated maximum file size for the target files */
  public long writeMaxFileSize() {
    return writeMaxFileSize;
  }

  /** Partition specification id for the target files */
  public int outputSpecId() {
    return outputSpecId;
  }
}
