/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.iceberg.actions;

import org.apache.iceberg.StructLike;
import org.apache.iceberg.actions.compaction.DataCompactionStrategy;
import org.apache.iceberg.expressions.Expression;

public interface CompactDataFiles extends Action<CompactDataFiles, CompactDataFiles.Result> {

    /**
     * The parallelism level to use when processing jobs generated by the Compaction Strategy. The structure
     * and contents of the jobs is determined by the Compaction Strategy and options passed to it. When running
     * each job will be run independently and asynchronously.
     * @param par number of concurrent jobs
     * @return
     */
    CompactDataFiles parallelism(int par) ;

    /**
     * Pass an already constructed DataCompactionStrategy
     * @param strategy
     * @return
     */
    CompactDataFiles compactionStrategy(DataCompactionStrategy strategy);

    // Todo Do we want to allow generic class loading here? I think yes this will probably be framework specific
    CompactDataFiles compactionStrategy(String strategyName);

    /**
     * A user provided filter for determining which files will be considered by the
     * Compaction strategy. This will be used in addition to whatever rules the Compaction strategy
     * already uses.
     * @param expression
     * @return this for chaining
     */
    CompactDataFiles filter(Expression expression);

    public class Result {


    }

    class CompactionJobInfo {
        private final int jobIndex;
        private final int partitionIndex;
        private final StructLike partition;

        CompactionJobInfo(int jobIndex, int partitionIndex, StructLike partition) {
            this.jobIndex = jobIndex;
            this.partitionIndex = partitionIndex;
            this.partition = partition;
        }

        int jobIndex() {
            return jobIndex;
        }

        int partitionIndex() {
            return partitionIndex;
        }

        StructLike partition() {
            return partition;
        }
    }

    public class JobResult {
        private long filesRemoved;
        private long filesAdded;
    }
}
