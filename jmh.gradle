/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

if (jdkVersion != '11' && jdkVersion != '17' && jdkVersion != '21') {
  throw new GradleException("The JMH benchmarks must be run with JDK 11 or JDK 17 or JDK 21")
}

List<String> flinkVersions = System.getProperty("flinkVersions").split(",").toList().findAll { !it.empty }
List<String> sparkVersions = System.getProperty("sparkVersions").split(",").toList().findAll { !it.empty }
List<String> scalaVersions = System.getProperty("scalaVersions").split(",").findAll { !it.empty }
String scalaVersion = scalaVersions[0]
def jmhProjects = [project(":iceberg-core"), project(":iceberg-data")]

for (ver in flinkVersions) {
  jmhProjects.add(project(":iceberg-flink:iceberg-flink-${ver}"))
}

for (ver in sparkVersions) {
  jmhProjects.add(project(":iceberg-spark:iceberg-spark-${ver}_${scalaVersion}"))
  jmhProjects.add(project(":iceberg-spark:iceberg-spark-extensions-${ver}_${scalaVersion}"))
}

configure(jmhProjects) {
  apply plugin: 'me.champeau.jmh'
  apply plugin: 'io.morethan.jmhreport'

  def jmhReportDir = project.property("jmhJsonOutputPath").toString().replace(".json", "")
  mkdir(file(jmhReportDir))

  jmh {
    jmhVersion = '1.37'
    failOnError = true
    forceGC = true
    includeTests = true
    humanOutputFile = file(jmhOutputPath)
    resultsFile = file(jmhJsonOutputPath)
    resultFormat = 'JSON'
    includes = [jmhIncludeRegex]
    zip64 = true
  }

  jmhReport {
    jmhResultPath = file(jmhJsonOutputPath)
    jmhReportOutput = file(jmhReportDir)
  }

  jmhCompileGeneratedClasses {
    pluginManager.withPlugin('com.palantir.baseline-error-prone') {
      options.errorprone.enabled = false
    }
  }

  tasks.jmh.finalizedBy tasks.jmhReport
}
