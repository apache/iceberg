#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

---
openapi: 3.0.3
info:
  title: Apache Iceberg REST Catalog API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
  description:
    Defines the specification for the first version of the REST Catalog API.
    Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
servers:
  - url: "{scheme}://{host}/{basePath}"
    description: Server URL when the port can be inferred from the scheme
    variables:
      scheme:
        description: The scheme of the URI, either http or https.
        default: https
      host:
        description: The host address for the specified server
        default: localhost
      basePath:
        description: Optional prefix to be appended to all routes
        default: ""
  - url: "{scheme}://{host}:{port}/{basePath}"
    description: Generic base server URL, with all parts configurable
    variables:
      scheme:
        description: The scheme of the URI, either http or https.
        default: https
      host:
        description: The host address for the specified server
        default: localhost
      port:
        description: The port used when addressing the host
        default: "443"
      basePath:
        description: Optional prefix to be appended to all routes
        default: ""
# All routes are currently configured using an Authorization header.
security:
  - BearerAuth: []
paths:
  /v1/config:

    get:
      tags:
        - Configuration API
      summary: List all catalog configuration settings
      operationId: getConfig
      description:
        "
        All REST clients should first call this route to get catalog configuration
        properties from the server to configure the catalog and its HTTP client.
        Configuration from the server consists of two sets of key/value pairs.

        - defaults -  properties that should be used as default configuration; applied before client configuration

        - overrides - properties that should be used to override client configuration; applied after defaults and client configuration


        Catalog configuration is constructed by setting the defaults, then client-
        provided configuration, and finally overrides. The final property set is then
        used to configure the catalog.


        For example, a default configuration property might set the size of the
        client pool, which can be replaced with a client-specific setting. An
        override might be used to set the warehouse location, which is stored
        on the server rather than in client configuration.


        Common catalog configuration settings are documented at
        https://iceberg.apache.org/configuration/#catalog-properties
        "
      responses:
        200:
          description: Server specified configuration values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogConfiguration'
              example: {
                "data": {
                  "overrides": {
                    "warehouse": "s3://bucket/warehouse/"
                  },
                  "defaults": {
                    "clients": "4"
                  }
                }
              }
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'

  /v1/namespaces:

    get:
      tags:
        - Catalog API
      summary: List namespaces, optionally providing a parent namespace to list underneath
      description:
        List all namespaces at a certain level, optionally starting from a given parent namespace.
        For example, if table accounting.tax.paid exists, using 'SELECT NAMESPACE IN accounting' would
        translate into `GET /namespaces?parent=accounting` and must return a namespace, ["accounting", "tax"].
        If `parent` is not provided, all top-level namespaces should be listed.
      operationId: listNamespaces
      parameters:
        - name: parent
          in: query
          description:
            An optional namespace, underneath which to list namespaces.
            If not provided or empty, all top-level namespaces should be listed.
            If parent is a multipart namespace, the parts must be separated by the null byte.
          required: false
          allowEmptyValue: true
          schema:
            type: string
          example: "accounting%00tax"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ListNamespacesResponse'
              examples:
                NonEmptyResponse:
                  $ref: '#/components/examples/ListNamespacesNonEmptyExample'
                EmptyResponse:
                  $ref: '#/components/examples/ListNamespacesEmptyExample'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description: Not Found - Namespace provided in the `parent` query parameter is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    post:
      tags:
        - Catalog API
      summary: Create a namespace
      description:
        Create a namespace, with an optional set of properties.
        The server might also add properties, such as `last_modified_time` etc.
      operationId: createNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/CreateNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        409:
          description: Conflict - The namespace already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                NamespaceAlreadyExists:
                  $ref: '#/components/examples/NamespaceAlreadyExistsError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/namespace'

    get:
      tags:
        - Catalog API
      summary: Load the metadata properties for a namespace
      operationId: loadNamespaceMetadata
      description: Return all stored metadata properties for a given namespace
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/GetNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description: Not Found - Namespace not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    delete:
      tags:
        - Catalog API
      summary: Drop a namespace from the catalog. Namespace must be empty.
      operationId: dropNamespace
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DropNamespaceResponse'
              example: { "dropped": true }
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description: Not Found - Namespace to delete does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespaces/{namespace}/properties:
    parameters:
      - $ref: '#/components/parameters/namespace'

    post:
      tags:
        - Catalog API
      summary: Set or remove properties on a namespace
      operationId: updateProperties
      description:
        Set and/or remove properties on a namespace.
        The request body specifies a list of properties to remove and a map
        of key value pairs to update.

        Properties that are not in the request are not modified or removed by this call.

        Server implementations are not required to support namespace properties.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNamespacePropertiesRequest'
            examples:
              UpdateAndRemoveProperties:
                $ref: '#/components/examples/UpdateAndRemoveNamespacePropertiesRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UpdateNamespacePropertiesResponse'
              example: {
                "updated": [ "owner" ],
                "removed": [ "foo" ],
                "missing": [ "bar" ]
              }
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description: Not Found - Namespace not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
        406:
          $ref: '#/components/responses/UnsupportedOperationResponse'
        422:
          description: Unprocessable Entity - A property key was included in both `removals` and `updates`
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                UnprocessableEntityDuplicateKey:
                  $ref: '#/components/examples/UnprocessableEntityDuplicateKey'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespaces/{namespace}/tables:
    parameters:
      - $ref: '#/components/parameters/namespace'

    get:
      tags:
        - Catalog API
      summary: List all table identifiers underneath a given namespace
      description: Return all table identifiers under this namespace
      operationId: listTables
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ListTablesResponse'
              examples:
                NonEmptyResponse:
                  $ref: '#/components/examples/ListTablesNonEmptyExample'
                EmptyNamespaceResponse:
                  $ref: '#/components/examples/ListTablesEmptyExample'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description: Not Found - The namespace specified does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespaces/{namespace}/tables/{table}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/table'

    delete:
      tags:
        - Catalog API
      summary: Drop a table from the catalog
      operationId: dropTable
      description: Remove a table from the catalog
      parameters:
        - name: purgeRequested
          in: query
          required: false
          description: Whether the user requested to purge the underlying table's data and metadata
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DropTableResponse'
              example: { "dropped": true, "purged": false }
        202:
          description: Accepted - for use if purgeRequested is implemented as an asynchronous action.
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description:
            Not Found - NoSuchTableException, Table to drop does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                TableToRenameDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    head:
      tags:
        - Catalog API
      summary: Check if a table exists
      operationId: tableExists
      description:
        Check if a table exists within a given namespace. This request does not return a response body.
      responses:
        200:
          description: OK - Table Exists
        400:
          description: Bad Request
        401:
          description: Unauthorized
        404:
          description: Not Found

  /v1/tables/rename:

    post:
      tags:
        - Catalog API
      summary: Rename a table from its current name to a new name
      description:
        Rename a table from one identifier to another. It's valid to move a table
        across namespaces, but the server implementation is not required to support it.
      operationId: renameTable
      requestBody:
        description: Current table identifier to rename and new table identifier to rename to
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameTableRequest'
            examples:
              RenameTableSameNamespace:
                $ref: '#/components/examples/RenameTableSameNamespace'
        required: true
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        404:
          description:
            Not Found
            - NoSuchTableException, Table to rename does not exist
            - NoSuchNamespaceException, The target namespace of the new table identifier does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              examples:
                TableToRenameDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
                NamespaceToRenameToDoesNotExist:
                  $ref: '#/components/examples/NoSuchNamespaceError'
        406:
          $ref: '#/components/responses/UnsupportedOperationResponse'
        409:
          description: Conflict - The target table identifier to rename to already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergErrorResponse'
              example:
                $ref: '#/components/examples/TableAlreadyExistsError'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

components:
  #######################################################
  # Common Parameter Definitions Used In Several Routes #
  #######################################################
  parameters:
    namespace:
      name: namespace
      in: path
      required: true
      description:
        A namespace identifier as a single string.
        Multipart namespace parts should be separated by the null byte.
      schema:
        type: string
      examples:
        singlepart_namespace:
          value: "accounting"
        multipart_namespace:
          value: "accounting%00tax"

    table:
      name: table
      in: path
      description: A table name
      required: true
      schema:
        type: string
      example: "sales"

  ##############################
  # Application Schema Objects #
  ##############################
  schemas:

    StandardErrorWrapper:
      type: object
      description: JSON error payload returned in a response with further details on the error
      required:
        - message
        - type
        - code
      properties:
        message:
          type: string
          description: Human-readable error message
        type:
          type: string
          description: Internal type definition of the error
          example: NoSuchNamespaceException
        code:
          type: integer
          minimum: 400
          maximum: 600
          description: HTTP response code
          example: 404

    CatalogConfiguration:
      type: object
      description: Server-provided configuration for the catalog.
      required:
        - defaults
        - overrides
      properties:
        overrrides:
          type: object
          description:
            Properties that should be used to override client configuration; applied after defaults and client configuration.
        defaults:
          type: object
          description:
            Properties that should be used as default configuration; applied before client configuration.

    CreateNamespaceRequest:
      type: object
      required:
        - namespace
      properties:
        namespace:
          $ref: '#/components/schemas/Namespace'
        properties:
          type: object
          description: Configured string to string map of properties for the namespace
          example: '{ "owner": "Hank Bendickson" }'
          default: '{ }'

    Namespace:
      description: Reference to one or more levels of a namespace
      type: array
      items:
        type: string
      example: [ "accounting", "tax" ]

    RenameTableRequest:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/TableIdentifier'
        destination:
          $ref: '#/components/schemas/TableIdentifier'

    TableIdentifier:
      type: object
      required:
        - namespace
        - name
      properties:
        namespace:
          type: array
          description: Individual levels of the namespace
          items:
            type: string
        name:
          type: string
          nullable: false

    UpdateNamespacePropertiesRequest:
      type: object
      properties:
        removals:
          type: array
          uniqueItems: true
          items:
            type: string
          example: '[ "department", "access_group" ]'
        updates:
          uniqueItems: true
          type: object
          items:
            type: string
          example: { "owner": "Hank Bendickson" }


  #############################
  # Reusable Response Objects #
  #############################
  responses:

    BadRequestErrorResponse:
      description:
        Indicates a bad request error. It could be caused by an unexpected request
        body format or other forms of request validation failure, such as invalid json.
        Usually serves application/json content, although in some cases simple text/plain content might
        be returned by the server's middleware.
      content:
        application/json:
          schema:
            $ref: '#/components/responses/IcebergErrorResponse'
          example: {
            "error": {
              "message": "Malformed request",
              "type": "BadRequestException",
              "code": 400
            }
          }

    #  Note that this is a representative example response for use as a shorthand in the spec.
    #  The fields `message` and `type` as indicated here are not presently prescriptive.
    UnauthorizedResponse:
      description: Unauthorized. The client does not have permissions to call this route.
      content:
        application/json:
          schema:
            $ref: '#/components/responses/IcebergErrorResponse'
          example: {
            "error": {
              "message": "Not authorized to make this request",
              "type": "NotAuthorizedException",
              "code": 401
            }
          }

    #  Note that this is a representative example response for use as a shorthand in the spec.
    #  The fields `message` and `type` as indicated here are not presently prescriptive.
    UnsupportedOperationResponse:
      description: Not Acceptable / Unsuported Operation. The server does not support this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/responses/IcebergErrorResponse'
          example: {
            "error": {
              "message": "The server does not support this operation",
              "type": "UnsupportedOperationException",
              "code": 406
            }
          }

    IcebergErrorResponse:
      description: JSON wrapper for all error responses (non-2xx)
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/StandardErrorWrapper'
            additionalProperties: false
            example: {
              "error": {
                "message": "The server does not support this operation",
                "type": "UnsupportedOperationException",
                "code": 406
              } }

    CreateNamespaceResponse:
      description: A succesful call to create a namespace
      content:
        application/json:
          schema:
            type: object
            properties:
              created:
                type: boolean
                description: true if the namespace was added to the catalog

    DropTableResponse:
      description: A successful call to drop a table
      content:
        application/json:
          schema:
            type: object
            properties:
              dropped:
                type: boolean
                description: true if the table was found and removed from the catalog
              purged:
                type: boolean
                description: whether the underlying data was purged or is being purged

    DropNamespaceResponse:
      description: A successful call to drop a namespace
      content:
        application/json:
          schema:
            type: object
            properties:
              dropped:
                description: true if the namespace was dropped
                type: boolean

    GetNamespaceResponse:
      description:
        Returns a namespace, as well as any properties stored on the namespace if namespace properties
        are supported by the server.
      content:
        application/json:
          schema:
            type: object
            required:
              - namespace
            properties:
              namespace:
                $ref: '#/components/schemas/Namespace'
              properties:
                type: object
                description:
                  Properties stored on the namespace, if supported by the server.
                  If the server does not support namespace properties, it should return null for this field.
                  If namespace properties are supported, but none are set, it should return an empty object.
                example: { "owner": "Ralph", 'transient_lastDdlTime': '1452120468' }
                default: { }
                nullable: true

    ListTablesResponse:
      description: A list of table identifiers
      content:
        application/json:
          schema:
            type: object
            properties:
              identifiers:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/TableIdentifier'

    ListNamespacesResponse:
      description: A list of namespaces
      content:
        application/json:
          schema:
            type: object
            properties:
              namespaces:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Namespace'

    ServerErrorResponse:
      description:
        A server-side problem that might not be addressable from the client side. Used for server 5xx errors.
      content:
        application/json:
          schema:
            $ref: '#/components/responses/IcebergErrorResponse'
          example: {
            "error": {
              "message": "Internal Server Error",
              "type": "InternalServerError",
              "code": 500
            }
          }

    UpdateNamespacePropertiesResponse:
      description: JSON data response for a synchronous update properties request.
      content:
        application/json:
          schema:
            type: object
            required:
              - updated
              - removed
            properties:
              updated:
                description: List of property keys that were added or udpated
                type: array
                uniqueItems: true
                items:
                  type: string
              removed:
                description: List of properties that were removed
                type: array
                items:
                  type: string
              missing:
                type: array
                items:
                  type: string
                description:
                  List of properties requested for removal that were not found
                  in the namespace's properties. Represents a partial success response.
                  Server's do not need to implement this.
                nullable: true

  #######################################
  # Common examples of different values #
  #######################################
  examples:

    ListTablesEmptyExample:
      summary: An empty list for a namespace with no tables
      value: {
        "identifiers": [ ]
      }

    ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value: {
        "namespaces": [ ]
      }

    ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value: {
        "namespaces": [
          ["accounting", "tax"],
          ["accounting", "credits"]
        ]
      }

    ListTablesNonEmptyExample:
      summary: A non-empty list of table identifiers
      value: {
        "identifiers": [
          { "namespace": ["accounting", "tax"], "name": "paid" },
          { "namespace": ["accounting", "tax"], "name": "owed" }
        ]
      }

    MultipartNamespaceAsPathVariable:
      summary: A multi-part namespace, as represented in a path parameter
      value: "accounting%00tax"

    NamespaceAsPathVariable:
      summary: A single part namespace, as represented in a path paremeter
      value: "accounting"

    NamespaceAlreadyExistsError:
      summary: The requested namespace already exists
      value: {
        "error": {
          "message": "The given namepace already exists",
          "type": "AlreadyExistsException",
          "code": 409
        }
      }

    NoSuchTableError:
      summary: The requested table does not
      value: {
        "error": {
          message: "The given table does not exist",
          type: "NoSuchTableException",
          code: 404
        }
      }

    NoSuchNamespaceError:
      summary: The requested namespace does not exist
      value: {
        "error": {
          "message": "The given namespace does not exist",
          "type": "NoSuchNamespaceException",
          "code": 404
        }
      }

    RenameTableSameNamespace:
      summary: Rename a table in the same namespace
      value: {
        "source": { "namespace": ["accounting", "tax"], "name": "paid" },
        "destination": { "namespace": ["accounting", "tax"], "name": "owed" }
      }

    TableAlreadyExistsError:
      summary: The requested table identifier already exists
      value: {
        "error": {
          "message": "The given table already exists",
          "type": "AlreadyExistsException",
          "code": 409
        }
      }

    # This is an example response and is not meant to be prescriptive regarding the message or type.
    UnprocessableEntityDuplicateKey:
      summary:
        The request body either has the same key multiple times in what should be a map with unique keys
        or the request body has keys in two or more fields which should be disjoint sets.
      value: {
        "error": {
          "message": "The request cannot be processed as there is a key present multiple times",
          "type": "UnprocessableEntityException",
          "code": 422
        }
      }

    UpdateAndRemoveNamespacePropertiesRequest:
      summary: An update namespace properties request with both properties to remove and properties to upsert.
      value: {
        "removals": [ "foo", "bar" ],
        "updates": { "owner": "Raoul" }
      }

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
