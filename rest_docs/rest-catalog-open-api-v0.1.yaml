#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

---
openapi: 3.0.3
info:
  title: Apache Iceberg REST Catalog API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  description:
    Defines the specification for the first version of the REST Catalog API. Implementations should support both Iceberg table specs v1 and v2, with priority given to v2.
servers:
  - url: http://127.0.0.1:1080
    description: URL Used for Mock-Server Unit Tests
# All routes are currently configured using an Authorization header.
security:
  - BearerAuth: []
paths:
  /v1/config:
    get:
      tags:
        - Configuration API
      summary: List all catalog configuration settings
      operationId: getConfig
      description:
        All REST catalog clients will first call this route to get some configuration provided by the server.
        This route will return any server specified default configuration values for the catalog, such as
        configuration values used to setup the catalog for usage with Spark (e.g. vectorization-enabled).

        Users should be able to override these values with client specified values.

        The server might be able to request that the client use its value over a value that has been
        configured in the client application. How and if it will do that is an open question, and thus
        not currently specified in this documents schema.
      responses:
        default:
          description: Server-Specific Configuration Values (or Overrides)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergConfiguration'
        "400":
          description: Unknown Error
        "401":
          description: Unauthorized

  /v1/namespaces/{namespace}/tables/{table}:
    parameters:
      - name: namespace
        in: path
        description: A namespace identifier
        required: true
        schema:
          type: string
        examples:
          singlepart_namespace:
            value: "accounting"
          multipart_namespace:
            value: "accounting.tax"
      - name: table
        in: path
        description: A table name
        required: true
        schema:
          type: string
        example: "sales"
    get:
      tags:
        - Catalog API
      summary: Load a given table from a given namespace
      operationId: loadTable
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTableResponse'
        '401':
          description: Unauthorized
        # Using 412, `Precondition Failed`, instead of 404, as 404 makes monitoring response codes from ELBs
        #  very difficult - Hard to tell if clients or servers are misconfigured and calling non-existent routes
        #  or missing routes versus expected error cases such as NoSuchTableException (expected meaning that
        #  a person who is on call shouldn't be paged for this but 404 they might need to be).
        '412':
          description: NoSuchTableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSuchTableError'
    delete:
      tags:
        - Catalog API
      summary: Drop a table from the catalog
      operationId: dropTable
      description: Remove a table from the catalog
      parameters:
        - name: purgeRequested
          in: query
          required: false
          description: Whether the user requested to purge the underlying table's data and metadata
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
                description: true if the table was dropped and false if the table did not exist
    head:
      tags:
        - Catalog API
      summary: Check if a table exists
      operationId: tableExists
      description:
        Check if a table exists within a given namespace. Returns the standard response with `true` when found. Will return a TableNotFound error if not present.
      parameters:
        - name: namespace
          in: path
          required: true
          description: A namespace identifier
          schema:
            type: string
        - name: table
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '412':
          description: Table Not Found
  /v1/namespaces/{namespace}/tables:
    parameters:
      - name: namespace
        description: A namespace identifier under which to list tables
        in: path
        required: true
        schema:
          type: string
        examples:
          singlepart_namespace:
            value: "accounting"
          multipart_namespace:
            value: "accounting.tax"
    get:
      tags:
        - Catalog API
      summary: List all table identifiers underneath a given namespace
      description: Return all table identifiers under this namespace
      operationId: listTables
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
    post:
      tags:
        - Catalog API
      summary: Create a table with the identifier given in the body
      operationId: createTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTableResponse'
  /v1/tables/renameTable:
    post:
      tags:
        - Catalog API
      summary: Rename a table from its current name to a new name
      description:
        Rename a table from one identifier to another. It's valid to move a table
        across namespaces, but the server implementation doesn't need to support it.
      operationId: renameTable
      requestBody:
        description: Current table identifier to rename and new table identifier to rename to
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameTableRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '406':
          # UnsupportedOperationException
          description: Not Acceptable
        # Not using 404 as 404 is very hard to monitor.
        # There's no way to tell by monitoring returned response codes
        # if a client made a valid request but the table didn't exist,
        # or if a client or server has been misconfigured or some bug exists
        # and the client is actually calling endpoints that the server doesn't
        # have.
        #
        # We can consider a different response code to use than 412.
        '412':
          description: Table to rename from does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSuchTableError'
              example:
                '{ error: { message: "Table does not exist", type: "NoSuchTableException", code: 41202 }'
        '409':
          description: The new table identifier, the to table rename to, already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableAlreadyExistsError'
              example:
                '{ error: { message: "Namespace already exists", type: "AlreadyExistsException", code: 40902 }'
  /v1/namespaces/{namespace}/properties:
    parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Catalog API
      summary: Set a collection of properties on a namespace
      operationId: setProperties
      description:
        Set a collection of properties on a namespace in the catalog.
        Properties that are not in the given map are not modified or removed by this call.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPropertiesRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
        '417':
          description: Namespace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSuchNamespaceError'
              example:
                '{ error: { message: "Namespace does not exist", type: "NoSuchNamespaceException", code: 41701 }'
        '409':
          description: Namespace already exists
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/NamespaceAlreadyExistsError'
              example:
                '{ error: { message: "Namespace already exists", type: "AlreadyExistsException", code: 40901 }'
  /v1/namespaces:
    parameters:
      - name: parent
        in: query
        description: Optional parent namespace under which to list namespaces. When empty, list top-level namespaces.
        required: false
        schema:
          type: string
    get:
      tags:
        - Catalog API
      summary: List namespaces, optionally providing a parent namespace to list underneaath
      description:
        List all namespaces at a certain level, optionally starting from a given parent namespace.
        For example, if table a.b.t exists, using 'SELECT NAMESPACE IN a' this would translate into
        `GET /v1/namespaces?parent=a` and must return Namepace.of("a","b").
      operationId: listNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacesResponse'
        '401':
          description: Unauthorized
  /v1/namespaces/{namespace}:
    parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Catalog API
      summary: Load the metadata properties for a namespace
      operationId: loadNamespaceMetadata
      description: Return all stored metadata properties for a given namespace
      responses:
        '200':
          description: OK
          content:
            application:
              schema:
                $ref: '#/components/schemas/GetNamespaceResponse'
        '412':
          description: Namespace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSuchNamespaceError'
              example:
                '{ error: { message: "Namespace does not exist", type: "NoSuchNamespaceException", code: 41201 }'
    post:
      tags:
        - Catalog API
      summary: Create a namespace
      description: Create a namespace, with an optional set of properties. The server might also add properties, such as last_modified_time etc.
      operationId: createNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
    delete:
      tags:
        - Catalog API
      summary: Drop a namespace from the catalog. Namespace must be empty.
      operationId: dropNamespace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        # TODO - Not empty exception, No such namespace exception
        '401':
          description: Unauthorized
components:
  schemas:
    TableIdentifier:
      type: object
      required:
        - namespace
      properties:
        namespace:
          type: array
          items:
            type: string
          nullable: false  # Note this is ignored
        name:
          type: string
          nullable: false
    RemovePropertiesRequest:
      type: object
      properties:
        namespace:
          type: string
        properties:
          uniqueItems: true
          type: array
          items:
            type: string
    CreateNamespaceRequest:
      type: object
      properties:
        namespace:
          type: array
          description: individual levels of the namespace
          items:
            type: string
        properties:
          type: object
          description: Configuration properties for the namespace
          example: '{ owner: "Hank Bendickson" }'
    RenameTableRequest:
      type: object
      properties:
        sourceTableIdentifier:
          $ref: '#/components/schemas/TableIdentifier'
        destinationTableIdentifier:
          $ref: '#/components/schemas/TableIdentifier'
    CreateTableRequest:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/TableIdentifier'
        schema:
          $ref: '#/components/schemas/Schema'
        partitionSpec:
          $ref: '#/components/schemas/PartitionSpec'
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
        properties:
          type: object
          additionalProperties:
            type: string
        metadataJson:
          type: string
        commit:
          type: boolean
    PartitionSpec:
      type: object
      properties:
        unpartitioned:
          type: boolean
    Schema:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            type: integer
            format: int32
    SortOrder:
      type: object
      properties:
        unsorted:
          type: boolean
    CreateTableResponse:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/TableIdentifier'
        tableLocation:
          type: string
          description: "Path of of the table just before the standard \
            metadata / data folders. This is useful in cases where a different location
            provider might be used"
          example: s3://bucket/prod/accounting.db/monthly_sales
        metadataLocation:
          type: string
          description: "Location of the most current primary metadata file for the table"
          example: s3://bucket/prod/accounting.db/monthly_sales/metadata/00001-0d4ef14f-ef7d-43e7-9af-5f4ad40a1103.metadata.json
        metadataJson:
          type: string
          description: "Stringified JSON representing the tables metadata"
          example:
            "TODO"
        accessToken:
          type: string
    SetPropertiesRequest:
      type: object
      properties:
        namespace:
          type: string
        properties:
          type: object
    ListNamespacesResponse:
      type: object
      properties:
        databases:
          type: array
          items:
            $ref: '#/components/schemas/Namespace'
    Namespace:
      type: object
      description: Reference to one or more levels of a namespace
      properties:
        empty:
          type: boolean
    GetNamespaceResponse:
      type: object
      properties:
        namespace:
          $ref: '#/components/schemas/Namespace'
        properties:
          type: object
          additionalProperties:
            type: string
    ListTablesResponse:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/TableIdentifier'
    GetTableResponse:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/TableIdentifier'
        location:
          type: string
        metadataLocation:
          type: string
        metadataJson:
          type: string
        schema:
          $ref: '#/components/schemas/Schema'
        partitionSpec:
          $ref: '#/components/schemas/PartitionSpec'
        properties:
          type: object
          additionalProperties:
            type: string
    TableMetadata:
      type: object
      properties:
        currentSnapshotTo:
          $ref: '#/components/schemas/TableMetadata'
    IcebergConfiguration:
      type: object
      description: "Server-provided configuration for the catalog."
      properties:
        rootPath:
          minLength: 1
          type: string
          default: /v1
          nullable: false
          description:
            Root path to be used for all other requests. Server-side implementations
            are free to use another choice for root path, but must conform to the
            specification otherwise in order to interoperate with the URI generation
            that the REST catalog client will do.
        catalogProperties:
          type: object
          nullable: true
          description:
            An optional field for storing catalog configuration properties that
            are stored server side. This could be beneifical to an administrator,
            for example to enforce that a given LocationProvider is used or to
            enforce that a certain FileIO implementation is used.
    NoSuchNamespaceError:
      allOf:
        - $ref: '#/components/schemas/ResponseErrorObject'
      description: Namespace provided in the request does not exist
    NamespaceAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/ResponseErrorObject'
      description: Namespace provided in the request already exists
    NoSuchTableError:
      allOf:
        - $ref: '#/components/schemas/ResponseErrorObject'
      description: The given table identifier does not exist
    TableAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/ResponseErrorObject'
      description: the given table identifier already exists and cannot be created / renamed to
    IcebergResponseObject:
      type: object
      description: JSON wrapper for all response bodies, with a data object and / or an error object
      properties:
        data:
          $ref: '#/components/schemas/ResponseDataObject'
        error:
          $ref: '#/components/schemas/ResponseErrorObject'
      example: "{ data: { }, error: { } }"
    ResponseDataObject:
      type: object
      description: JSON data payload returned in a successful response body.
      example: '{ data: { identifiers: [ "office.employees", "office.dogs", "office.cats" ] }'
    ResponseErrorObject:
      type: object
      description: Error portion embedded in all JSON responses with further details of the error
      properties:
        message:
          type: string
          description: Human-readable error message
        type:
          type: string
          description: Machine-type of the errror, such as an exception class
        code:
          type: integer
          description: Application specific error code, to disambiguage amongst subclasses of HTTP responses
          example: 40101
        metadata:
          type: object
          description: Additional metadata to accompany this error, such as server side stack traces or user instructions
          nullable: true
      required:
        - message
        - type
        - code
  examples:
    catalogName:
      value: prod
    namespace:
      value: accounting
    no_such_table_error:
      value: |-
        {
          message: "The given table does not exist",
          type: "NoSuchTableException",
          code: 40101
        }

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
