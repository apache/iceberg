#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

---
openapi: 3.0.3
info:
  title: Apache Iceberg REST Catalog API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  description:
    Defines the specification for the first version of the REST Catalog API. Implementations should support both Iceberg table specs v1 and v2, with priority given to v2.
servers:
  - url: https://{host}:{port}/{basePath}
    variables:
      host:
        description: The host address for the specified server
        default: localhost
      port:
        description: The port used when addressing the host
        default: "443"
      basePath:
        default: v1
  - url: http://127.0.0.1:1080/v1
    description: URL Used for Mock-Server Unit Tests
# All routes are currently configured using an Authorization header.
security:
  - BearerAuth: []
paths:
  /config:
    get:
      tags:
        - Configuration API
      summary: List all catalog configuration settings
      operationId: getConfig
      description:
        All REST catalog clients will first call this route to get some configuration provided by the server.
        This route will return any server specified default configuration values for the catalog, such as
        configuration values used to setup the catalog for usage with Spark (e.g. vectorization-enabled).

        Users should be able to override these values with client specified values.

        The server might be able to request that the client use its value over a value that has been
        configured in the client application. How and if it will do that is an open question, and thus
        not currently specified in this documents schema.
      responses:
        default:
          description: Server-Specific Configuration Values (or Overrides)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergConfiguration'
        "400":
          description: Unknown Error
        "401":
          description: Unauthorized
  /namespaces:
    get:
      tags:
        - Catalog API
      summary: List namespaces, optionally providing a parent namespace to list underneaath
      description:
        List all namespaces at a certain level, optionally starting from a given parent namespace.
        For example, if table a.b.t exists, using 'SELECT NAMESPACE IN a' this would translate into
        `GET /namespaces?parent=a` and must return Namepace.of("a","b").
      operationId: listNamespaces
      parameters:
        - name: parent
          in: query
          description: Optional parent namespace under which to list namespaces. When empty, list top-level namespaces.
          required: false
          schema:
            type: string
          example: ?parent=accounting.tax
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacesResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found (Parent namespace does not exist)
    post:
      tags:
        - Catalog API
      summary: Create a namespace
      description: Create a namespace, with an optional set of properties. The server might also add properties, such as last_modified_time etc.
      operationId: createNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '409':
          $ref: '#/components/responses/NamespaceAlreadyExistsResponse'

  /namespaces/{namespace}:
    parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Catalog API
      summary: Load the metadata properties for a namespace
      operationId: loadNamespaceMetadata
      description: Return all stored metadata properties for a given namespace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceResponse'
        '404':
          $ref: '#/components/responses/NoSuchNamespaceResponse'
    head:
      tags:
        - Catalog API
      summary: Check if a namespace exists
      operationId: namespaceExists
      description: Check if a namespace exists.
      responses:
        '200':
          description: OK - Namesapce exists
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    delete:
      tags:
        - Catalog API
      summary: Drop a namespace from the catalog. Namespace must be empty.
      operationId: dropNamespace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergResponseObject'
              example: { "data": { "dropped": true } }
        '401':
          description: Unauthorized
        '404':
          description: Not Found


  /namespaces/{namespace}/properties:
    parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Catalog API
      summary: Set or remove properties on a namespace
      operationId: setProperties / removeProperties
      description:
        Set and/or remove a collection or properties on a namespae.
        The request body specifies a list of properties to remove and a map
        of key value pairs to update.

        Properties that are not in the request are not modified or removed by this call.
        Server implementations are not required to support namespace properties.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertiesRequest'
            example:
              { "toRemove": [ "foo", "bar" ], "toUpdate": { "owner": "Raoul" } }
        required: true
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                # This is an IcebergResponseObject<SetPropertiesResponse>, in that it uses the standard wrapper.
                $ref: '#/components/schemas/UpdatePropertiesResponse'
              example: {
                "data": {
                  "updated": [ "owner" ],
                  "removed": [ "foo" ],
                  "notPresent": [ "bar" ]
                }
              }
        404:
          description: Not Found (NoSuchNamespaceException)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergResponseObject'
              example:
                { "error": { "message": "Namespace does not exist", "type": "NoSuchNamespaceException", "code": 404 } }
        406:
          description: Not Acceptable (Unsupported Operation)
        422:
          description: Unprocessable Entity. A property key was included in both toRemove and toUpdate.

  /namespaces/{namespace}/tables:
    parameters:
      - name: namespace
        description: A namespace identifier under which to list tables
        in: path
        required: true
        schema:
          type: string
        examples:
          singlepart_namespace:
            value: "accounting"
          multipart_namespace:
            value: "accounting.tax"
    get:
      tags:
        - Catalog API
      summary: List all table identifiers underneath a given namespace
      description: Return all table identifiers under this namespace
      operationId: listTables
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
        '404':
          description: Not Found (NoSuchNamespaceException)
          content:
            application/json:
              schema:
                $ref: '#/components/responses/IcebergResponseObject'
              example:
                '{ error: { message: "Namespace does not exist", type: "NoSuchNamespaceException", code: 404 }'

  /namespaces/{namespace}/tables/{table}:
    parameters:
      - name: namespace
        in: path
        description: A namespace identifier
        required: true
        schema:
          type: string
        examples:
          singlepart_namespace:
            value: "accounting"
          multipart_namespace:
            value: "accounting.tax"
      - name: table
        in: path
        description: A table name
        required: true
        schema:
          type: string
        example: "sales"

    delete:
      tags:
        - Catalog API
      summary: Drop a table from the catalog
      operationId: dropTable
      description: Remove a table from the catalog
      parameters:
        - name: purgeRequested
          in: query
          required: false
          description: Whether the user requested to purge the underlying table's data and metadata
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DropTableResponse'
              example: { "data": { "dropped": true, "purged": false } }
        202:
          # TODO - Add a callback or handle to check on the state of an async purge request
          description: Accepted - for use if purgeRequested is implemented as an asynchronous action.
        404:
          $ref: '#/components/responses/NoSuchTableResponse'

    head:
      tags:
        - Catalog API
      summary: Check if a table exists
      operationId: tableExists
      description:
        Check if a table exists within a given namespace.
      responses:
        200:
          description: OK - Table Exists
        401:
          description: Unauthorized
        404:
          description: Not Found

  /tables/rename:
    post:
      tags:
        - Catalog API
      summary: Rename a table from its current name to a new name
      description:
        Rename a table from one identifier to another. It's valid to move a table
        across namespaces, but the server implementation doesn't need to support it.
      operationId: renameTable
      requestBody:
        description: Current table identifier to rename and new table identifier to rename to
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameTableRequest'
        required: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description:
            Not Found
            - NoSuchTableException, Table to rename does not exist
            - NoSuchNamespaceException, The target namespace of the new table identifier does not exist
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/NoSuchTableResponse'
                  - $ref: '#/components/responses/NoSuchNamespaceResponse'
              examples:
                table_to_rename_does_not_exist:
                  value: {
                    "error": {
                      "message": "Table to rename does not exist",
                      "type": "NoSuchTableException",
                      "code": 404
                    } }
                namespace_to_rename_to_does_not_exist:
                  value: {
                    "error": {
                      "message": "Namespace to rename to does not exist",
                      "type": "NoSuchNameSpaceException",
                      "code": 404
                    } }
        '406':
          description: Not Acceptable (UnsupportedOperationException)
        '409':
          description: Conflict (AlreadyExistsException - The new target table identifier already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableAlreadyExistsError'
              example: {
                "error": {
                  "message": "Table already exists",
                  "type": "AlreadyExistsException",
                  "code": 409
                } }

components:

  ##############################
  # Application Schema Objects #
  ##############################
  schemas:
    ResponseDataObject:
      type: object
      description: JSON data payload returned in a successful response body
      properties:
        data:
          type: object
          description: Wrapper for the response of a successful request
      example: { "data": { "identifiers": [ "office.employees", "office.dogs", "office.cats" ] } }
    ResponseErrorObject:
      type: object
      description: JSON error payload returned in a response with further details on the error
      required:
        - message
        - type
        - code
      properties:
        message:
          type: string
          description: Human-readable error message
        type:
          type: string
          description: Internal type of the error, such as an exception class
          example: NoSuchNamespaceException
        code:
          type: integer
          minimum: 100
          maximum: 600
          description: HTTP response code
          example: 404
        metadata:
          type: object
          description: Additional metadata to accompany this error, such as server side stack traces or user instructions
          nullable: true
    TableIdentifier:
      type: object
      required:
        - namespace
      properties:
        namespace:
          type: array
          description: Individual levels of the namespace
          items:
            type: string
          nullable: false
        name:
          type: string
          nullable: false
    CreateNamespaceRequest:
      type: object
      required:
        - namespace
      properties:
        namespace:
          type: array
          description: Individual levels of the namespace
          items:
            type: string
        properties:
          type: object
          description: Configuration properties for the namespace
          example: '{ "owner": "Hank Bendickson" }'
    RenameTableRequest:
      type: object
      properties:
        sourceTableIdentifier:
          $ref: '#/components/schemas/TableIdentifier'
        destinationTableIdentifier:
          $ref: '#/components/schemas/TableIdentifier'
    UpdatePropertiesRequest:
      type: object
      properties:
        toRemove:
          type: array
          uniqueItems: true
          items:
            type: string
          example: '[ "department", "access_group" ]'
        toUpdate:
          uniqueItems: true
          type: object
          items:
            type: string
          example: { "owner": "Hank Bendickson" }
    UpdatePropertiesResponse:
      type: object
      description: JSON data response for a synchronous update properties request.
      properties:
        updated:
          type: array
          items:
            type: string
            description: List of property keys that were added or udpated
        removed:
          type: array
          items:
            type: string
          description: List of properties that were removed (and not updated)
        notPresent:
          type: array
          items:
            type: string
            description:
              List of properties requested for removal that were not found
              in the namespace's properties.
              Represents a partial success response.
              Server's do not need to implement this.
    ListNamespacesResponse:
      type: object
      properties:
        namespaces:
          type: array
          items:
            $ref: '#/components/schemas/Namespace'
    DropTableResponse:
      type: object
      properties:
        dropped:
          type: boolean
          description: true if the table was found and removed from the catalog
        purged:
          type: boolean
          description: whether the underlying data was purged or is being purged
    Namespace:
      type: array
      description: Reference to one or more levels of a namespace
      items:
        type: string
      example: [ "accounting", "tax" ]
    GetNamespaceResponse:
      type: object
      properties:
        namespace:
          $ref: '#/components/schemas/Namespace'
        properties:
          type: object
          example: { "owner": "Ralph", 'transient_lastDdlTime': '1452120468' }
    ListTablesResponse:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/TableIdentifier'
    IcebergConfiguration:
      type: object
      description: "Server-provided configuration for the catalog."
      properties:
        rootPath:
          minLength: 1
          type: string
          default: /
          nullable: false
          description:
            Root path to be used for all other requests. Server-side implementations
            are free to use another choice for root path, but must conform to the
            specification otherwise in order to interoperate with the URI generation
            that the REST catalog client will do.
        catalogProperties:
          type: object
          nullable: true
          description:
            An optional field for storing catalog configuration properties that
            are stored server side. This could be beneifical to an administrator,
            for example to enforce that a given LocationProvider is used or to
            enforce that a certain FileIO implementation is used.

    TableAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/ResponseErrorObject'
      description: the given table identifier already exists and cannot be created / renamed to

  #############################
  # Reusable Response Objects #
  #############################
  responses:

    IcebergResponseObject:
      description: JSON wrapper for all response bodies, with a data object and / or an error object
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ResponseDataObject'
              - $ref: '#/components/schemas/ResponseErrorObject'
          example: { "data": { "namespaces": [ [ "ns1", "foo_db" ], [ "ns1", "bar_db" ] ] }, "error": { } }

    NamespaceAlreadyExistsResponse:
      description: The specified namespace provided in the request already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorObject'
          example:
            { "error": { "message": "Namespace already exists", "type": "AlreadyExistsException", code: 409 } }


    NoSuchNamespaceResponse:
      description: Not Found (The specified namespace was not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorObject'
          example: {
            "error": {
              "message": "Namespace does not exist", "type": "NoSuchNamespaceException", "code": 404
            } }

    NoSuchTableResponse:
      description: Not Found (The specified table identifier was not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorObject'
          example: {
            "error": {
              "message": "The given table does not exist", "type": "NoSuchTableException", code: 404
            } }

  examples:
    catalogName:
      value: prod
    namespace:
      value: accounting
    no_such_table_error:
      value:
        {
          message: "The given table does not exist",
          type: "NoSuchTableException",
          code: 404
        }

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
